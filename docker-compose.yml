version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2182:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9093:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "accidents:1:1"
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  cassandra:
    image: cassandra:4.0
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=accidents_cluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_ENDPOINT_SNITCH=SimpleSnitch
    healthcheck:
      test: ["CMD-SHELL", "nodetool status"]
      interval: 30s
      timeout: 10s
      retries: 5

  spark-master:
    build:
      context: .
      dockerfile: docker/spark.Dockerfile
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  spark-worker:
    build:
      context: .
      dockerfile: docker/spark.Dockerfile
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'

  spark-streaming:
    build:
      context: .
      dockerfile: docker/spark.Dockerfile
    volumes:
      - ./spark_streaming:/app
      - ./model:/model:ro
    depends_on:
      - spark-master
      - kafka
      - cassandra
    environment:
      - SPARK_MODE=client
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_DRIVER_MEMORY=2g
      - SPARK_EXECUTOR_MEMORY=2g
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    entrypoint: []
    command: >
      /opt/bitnami/spark/bin/spark-submit
      --master spark://spark-master:7077
      --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.4.1
      --conf spark.executor.memory=2g
      --conf spark.driver.memory=2g
      --conf spark.cores.max=2
      --conf spark.sql.shuffle.partitions=2
      --conf spark.default.parallelism=2
      --conf spark.streaming.kafka.consumer.cache.enabled=false
      --conf spark.streaming.backpressure.enabled=true
      --conf spark.streaming.kafka.consumer.poll.ms=512
      /app/src/streaming.py
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'

  kafka-producer:
    build:
      context: .
      dockerfile: docker/kafka-producer.Dockerfile
    volumes:
      - ./kafka_producer:/app
      - ./data:/data:ro
    depends_on:
      kafka:
        condition: service_healthy

  flask-api:
    build:
      context: .
      dockerfile: docker/flask-api.Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./flask_api:/app
    depends_on:
      - cassandra

  streamlit-dashboard:
    build:
      context: .
      dockerfile: docker/streamlit.Dockerfile
    ports:
      - "8501:8501"
    volumes:
      - ./dashboard:/app
    depends_on:
      - flask-api

volumes:
  cassandra_data:
